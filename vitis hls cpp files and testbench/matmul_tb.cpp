#include <stdio.h>
#include <iostream>
#include "matmul.hpp"
#include <mpfr.h>

int main() {

float input_img1[n_inputs] = {0.815686, 0.819608, 0.823529, 0.827451, 0.823529, 0.823529, 0.811765, 0.815686, 0.811765, 0.807843, 0.807843, 0.803922, 0.803922, 0.800000, 0.800000, 0.800000, 0.796078, 0.792157, 0.788235, 0.780392, 0.811765, 0.815686, 0.819608, 0.819608, 0.823529, 0.815686, 0.815686, 0.811765, 0.807843, 0.803922, 0.807843, 0.800000, 0.796078, 0.796078, 0.796078, 0.796078, 0.796078, 0.792157, 0.784314, 0.784314, 0.811765, 0.811765, 0.819608, 0.811765, 0.815686, 0.807843, 0.807843, 0.807843, 0.803922, 0.807843, 0.803922, 0.803922, 0.796078, 0.788235, 0.792157, 0.796078, 0.792157, 0.796078, 0.788235, 0.780392, 0.807843, 0.815686, 0.811765, 0.811765, 0.811765, 0.811765, 0.807843, 0.803922, 0.800000, 0.800000, 0.800000, 0.792157, 0.784314, 0.776471, 0.780392, 0.788235, 0.788235, 0.792157, 0.784314, 0.780392, 0.807843, 0.811765, 0.811765, 0.807843, 0.807843, 0.803922, 0.800000, 0.800000, 0.796078, 0.796078, 0.788235, 0.780392, 0.768627, 0.772549, 0.780392, 0.776471, 0.780392, 0.784314, 0.784314, 0.780392, 0.811765, 0.803922, 0.807843, 0.803922, 0.803922, 0.800000, 0.800000, 0.792157, 0.792157, 0.792157, 0.784314, 0.764706, 0.686275, 0.329412, 0.341176, 0.768627, 0.768627, 0.776471, 0.780392, 0.776471, 0.803922, 0.800000, 0.800000, 0.796078, 0.800000, 0.796078, 0.788235, 0.796078, 0.792157, 0.784314, 0.780392, 0.317647, 0.313726, 0.313726, 0.321569, 0.745098, 0.756863, 0.768627, 0.772549, 0.776471, 0.803922, 0.800000, 0.796078, 0.796078, 0.792157, 0.784314, 0.788235, 0.792157, 0.788235, 0.788235, 0.760784, 0.313726, 0.545098, 0.450980, 0.611765, 0.717647, 0.737255, 0.756863, 0.760784, 0.768627, 0.800000, 0.796078, 0.796078, 0.796078, 0.788235, 0.784314, 0.784314, 0.784314, 0.780392, 0.768627, 0.717647, 0.533333, 0.337255, 0.333333, 0.364706, 0.694118, 0.725490, 0.749020, 0.756863, 0.760784, 0.796078, 0.792157, 0.792157, 0.788235, 0.788235, 0.780392, 0.776471, 0.776471, 0.776471, 0.749020, 0.694118, 0.388235, 0.313726, 0.298039, 0.333333, 0.529412, 0.674510, 0.741176, 0.752941, 0.756863, 0.788235, 0.788235, 0.784314, 0.780392, 0.784314, 0.780392, 0.780392, 0.772549, 0.760784, 0.721569, 0.678431, 0.345098, 0.305882, 0.298039, 0.325490, 0.490196, 0.639216, 0.713726, 0.741176, 0.756863, 0.784314, 0.780392, 0.780392, 0.772549, 0.772549, 0.772549, 0.768627, 0.768627, 0.737255, 0.717647, 0.674510, 0.419608, 0.321569, 0.349020, 0.321569, 0.498039, 0.623529, 0.666667, 0.737255, 0.752941, 0.776471, 0.776471, 0.772549, 0.776471, 0.772549, 0.768627, 0.764706, 0.756863, 0.725490, 0.709804, 0.666667, 0.615686, 0.380392, 0.345098, 0.423529, 0.298039, 0.615686, 0.647059, 0.705882, 0.749020, 0.772549, 0.764706, 0.764706, 0.764706, 0.764706, 0.760784, 0.752941, 0.741176, 0.725490, 0.701961, 0.666667, 0.623529, 0.290196, 0.309804, 0.286275, 0.298039, 0.600000, 0.639216, 0.678431, 0.733333, 0.760784, 0.760784, 0.760784, 0.760784, 0.756863, 0.752941, 0.741176, 0.725490, 0.717647, 0.694118, 0.670588, 0.631373, 0.321569, 0.290196, 0.294118, 0.298039, 0.584314, 0.623529, 0.650980, 0.713726, 0.752941, 0.752941, 0.752941, 0.752941, 0.752941, 0.749020, 0.725490, 0.721569, 0.713726, 0.694118, 0.670588, 0.635294, 0.588235, 0.290196, 0.290196, 0.298039, 0.368627, 0.600000, 0.627451, 0.670588, 0.749020, 0.745098, 0.749020, 0.745098, 0.745098, 0.729412, 0.721569, 0.717647, 0.705882, 0.690196, 0.670588, 0.627451, 0.568627, 0.286275, 0.286275, 0.294118, 0.317647, 0.537255, 0.443137, 0.392157, 0.733333, 0.737255, 0.733333, 0.729412, 0.733333, 0.725490, 0.717647, 0.709804, 0.705882, 0.678431, 0.650980, 0.607843, 0.552941, 0.290196, 0.290196, 0.294118, 0.294118, 0.345098, 0.400000, 0.447059, 0.721569, 0.721569, 0.725490, 0.717647, 0.709804, 0.713726, 0.709804, 0.682353, 0.662745, 0.607843, 0.486275, 0.372549, 0.345098, 0.294118, 0.294118, 0.294118, 0.298039, 0.388235, 0.403922, 0.490196, 0.701961, 0.705882, 0.709804, 0.701961, 0.690196, 0.674510, 0.517647, 0.396078, 0.376471, 0.364706, 0.396078, 0.400000, 0.427451, 0.349020, 0.356863, 0.392157, 0.435294, 0.396078, 0.364706, 0.364706};
// 3 or metal bolt

int  pred1 = nn_inference(input_img1);
std::cout << std::endl;
std::cout << "NN Prediction: " << pred1 << std::endl;
std::cout << std::endl;


float input_img2[n_inputs] = {0.807843, 0.811765, 0.815686, 0.827451, 0.827451, 0.827451, 0.823529, 0.831373, 0.831373, 0.831373, 0.827451, 0.827451, 0.827451, 0.827451, 0.831373, 0.831373, 0.819608, 0.819608, 0.811765, 0.803922, 0.807843, 0.811765, 0.819608, 0.823529, 0.827451, 0.823529, 0.823529, 0.823529, 0.827451, 0.831373, 0.827451, 0.823529, 0.827451, 0.827451, 0.819608, 0.827451, 0.823529, 0.815686, 0.811765, 0.803922, 0.807843, 0.807843, 0.811765, 0.819608, 0.811765, 0.819608, 0.819608, 0.823529, 0.823529, 0.823529, 0.823529, 0.823529, 0.819608, 0.819608, 0.819608, 0.823529, 0.823529, 0.819608, 0.811765, 0.803922, 0.811765, 0.807843, 0.807843, 0.811765, 0.815686, 0.815686, 0.819608, 0.823529, 0.811765, 0.815686, 0.819608, 0.815686, 0.823529, 0.815686, 0.823529, 0.819608, 0.823529, 0.819608, 0.815686, 0.807843, 0.800000, 0.807843, 0.803922, 0.807843, 0.811765, 0.811765, 0.807843, 0.811765, 0.815686, 0.811765, 0.807843, 0.815686, 0.815686, 0.819608, 0.815686, 0.819608, 0.819608, 0.819608, 0.815686, 0.807843, 0.803922, 0.807843, 0.803922, 0.803922, 0.803922, 0.807843, 0.803922, 0.807843, 0.811765, 0.811765, 0.807843, 0.811765, 0.811765, 0.811765, 0.815686, 0.815686, 0.819608, 0.815686, 0.819608, 0.807843, 0.803922, 0.800000, 0.800000, 0.807843, 0.803922, 0.800000, 0.803922, 0.803922, 0.803922, 0.803922, 0.807843, 0.807843, 0.807843, 0.815686, 0.819608, 0.815686, 0.815686, 0.815686, 0.815686, 0.807843, 0.800000, 0.800000, 0.803922, 0.803922, 0.803922, 0.803922, 0.800000, 0.800000, 0.796078, 0.796078, 0.807843, 0.807843, 0.811765, 0.807843, 0.807843, 0.811765, 0.811765, 0.811765, 0.811765, 0.811765, 0.792157, 0.796078, 0.796078, 0.800000, 0.800000, 0.803922, 0.800000, 0.796078, 0.803922, 0.831373, 0.835294, 0.882353, 0.807843, 0.807843, 0.807843, 0.811765, 0.811765, 0.811765, 0.811765, 0.807843, 0.792157, 0.796078, 0.792157, 0.792157, 0.800000, 0.792157, 0.784314, 0.764706, 0.827451, 0.811765, 0.717647, 0.835294, 0.800000, 0.807843, 0.807843, 0.807843, 0.811765, 0.807843, 0.811765, 0.811765, 0.784314, 0.788235, 0.788235, 0.788235, 0.788235, 0.772549, 0.745098, 0.709804, 0.811765, 0.745098, 0.729412, 0.831373, 0.796078, 0.803922, 0.807843, 0.803922, 0.807843, 0.807843, 0.811765, 0.811765, 0.784314, 0.784314, 0.780392, 0.780392, 0.764706, 0.745098, 0.717647, 0.670588, 0.803922, 0.811765, 0.811765, 0.823529, 0.764706, 0.788235, 0.800000, 0.803922, 0.807843, 0.811765, 0.811765, 0.807843, 0.776471, 0.768627, 0.772549, 0.760784, 0.741176, 0.725490, 0.682353, 0.635294, 0.768627, 0.807843, 0.800000, 0.811765, 0.756863, 0.772549, 0.788235, 0.796078, 0.803922, 0.803922, 0.807843, 0.803922, 0.764706, 0.760784, 0.756863, 0.749020, 0.729412, 0.717647, 0.678431, 0.615686, 0.309804, 0.709804, 0.768627, 0.635294, 0.749020, 0.768627, 0.780392, 0.788235, 0.800000, 0.803922, 0.807843, 0.803922, 0.749020, 0.749020, 0.749020, 0.745098, 0.725490, 0.705882, 0.670588, 0.600000, 0.301961, 0.301961, 0.305882, 0.639216, 0.725490, 0.756863, 0.772549, 0.788235, 0.796078, 0.803922, 0.803922, 0.803922, 0.741176, 0.745098, 0.749020, 0.741176, 0.721569, 0.698039, 0.662745, 0.482353, 0.298039, 0.298039, 0.301961, 0.643137, 0.705882, 0.756863, 0.768627, 0.780392, 0.796078, 0.800000, 0.803922, 0.800000, 0.733333, 0.745098, 0.749020, 0.733333, 0.713726, 0.690196, 0.650980, 0.305882, 0.298039, 0.298039, 0.301961, 0.635294, 0.686275, 0.752941, 0.768627, 0.780392, 0.792157, 0.800000, 0.800000, 0.800000, 0.733333, 0.737255, 0.749020, 0.725490, 0.701961, 0.690196, 0.635294, 0.317647, 0.301961, 0.301961, 0.298039, 0.639216, 0.674510, 0.749020, 0.764706, 0.772549, 0.788235, 0.803922, 0.796078, 0.796078, 0.705882, 0.725490, 0.733333, 0.705882, 0.686275, 0.662745, 0.611765, 0.305882, 0.301961, 0.298039, 0.298039, 0.631373, 0.666667, 0.745098, 0.768627, 0.780392, 0.792157, 0.796078, 0.796078, 0.784314, 0.419608, 0.494118, 0.600000, 0.635294, 0.635294, 0.615686, 0.580392, 0.305882, 0.298039, 0.298039, 0.301961, 0.627451, 0.670588, 0.741176, 0.764706, 0.780392, 0.788235, 0.788235, 0.784314, 0.780392};
// 2 or small white screw

int  pred2 = nn_inference(input_img2);
std::cout << std::endl;
std::cout << "NN Prediction: " << pred2 << std::endl;
std::cout << std::endl;

return 0;
}
